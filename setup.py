#!/usr/bin/env python3
"""
Claude Parallel Runner Setup Script

This script helps you set up the Claude Parallel Runner with all necessary dependencies
and provider configurations.
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

def check_python_version():
    """Check if Python version is 3.10+."""
    if sys.version_info < (3, 10):
        console.print("‚ùå Python 3.10+ is required")
        console.print(f"Current version: {sys.version}")
        return False
    
    console.print(f"‚úÖ Python {sys.version.split()[0]} detected")
    return True

def check_node_js():
    """Check if Node.js is installed."""
    try:
        result = subprocess.run(["node", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            console.print(f"‚úÖ Node.js {result.stdout.strip()} detected")
            return True
    except FileNotFoundError:
        pass
    
    console.print("‚ùå Node.js not found")
    console.print("Please install Node.js from https://nodejs.org/")
    return False

def install_python_dependencies():
    """Install Python dependencies."""
    console.print("üì¶ Installing Python dependencies...")
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
    ) as progress:
        task = progress.add_task("Installing dependencies...", total=None)
        
        try:
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                console.print("‚úÖ Python dependencies installed successfully")
                return True
            else:
                console.print(f"‚ùå Failed to install dependencies: {result.stderr}")
                return False
                
        except Exception as e:
            console.print(f"‚ùå Error installing dependencies: {e}")
            return False

def install_claude_code():
    """Install Claude Code CLI."""
    console.print("üîß Installing Claude Code CLI...")
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
    ) as progress:
        task = progress.add_task("Installing Claude Code...", total=None)
        
        try:
            result = subprocess.run([
                "npm", "install", "-g", "@anthropic-ai/claude-code"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                console.print("‚úÖ Claude Code CLI installed successfully")
                return True
            else:
                console.print(f"‚ùå Failed to install Claude Code: {result.stderr}")
                return False
                
        except Exception as e:
            console.print(f"‚ùå Error installing Claude Code: {e}")
            return False

def setup_environment_file():
    """Create .env file with API keys."""
    console.print("üîë Setting up environment variables...")
    
    env_file = Path(".env")
    env_vars = {}
    
    # Load existing .env if it exists
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value.strip('"\'')
    
    # Ask for API keys
    console.print("\nüîê API Key Configuration:")
    console.print("You can skip any provider you don't want to use.")
    
    # Anthropic API Key
    if not env_vars.get("ANTHROPIC_API_KEY"):
        anthropic_key = Prompt.ask(
            "Anthropic API key", 
            default="", 
            password=True,
            show_default=False
        )
        if anthropic_key:
            env_vars["ANTHROPIC_API_KEY"] = anthropic_key
    
    # OpenRouter API Key
    if not env_vars.get("OPENROUTER_API_KEY"):
        openrouter_key = Prompt.ask(
            "OpenRouter API key", 
            default="", 
            password=True,
            show_default=False
        )
        if openrouter_key:
            env_vars["OPENROUTER_API_KEY"] = openrouter_key
    
    # Write .env file
    with open(env_file, 'w') as f:
        f.write("# Claude Parallel Runner Environment Variables\n")
        f.write("# Generated by setup.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f'{key}="{value}"\n')
    
    console.print(f"‚úÖ Environment file created: {env_file}")
    
    # Update current environment
    for key, value in env_vars.items():
        os.environ[key] = value
    
    return len(env_vars) > 0

def create_shell_config():
    """Create shell configuration for easy provider switching."""
    from provider_config import provider_manager
    
    console.print("üêö Creating shell configuration...")
    
    aliases = provider_manager.create_shell_aliases()
    
    # Save to file
    shell_config_file = Path("claude_aliases.sh")
    with open(shell_config_file, 'w') as f:
        f.write(aliases)
        f.write("\n\n# Usage examples:\n")
        f.write("# claude-anthropic \"Write a hello world function\"\n")
        f.write("# claude-openrouter \"Explain async programming\"\n")
    
    console.print(f"‚úÖ Shell aliases created: {shell_config_file}")
    console.print("To use aliases, run: source claude_aliases.sh")
    
    return True

def test_installation():
    """Test the installation by running a simple example."""
    console.print("üß™ Testing installation...")
    
    try:
        # Import modules to test they work
        from claude_parallel_runner import run_tasks_parallel_sync
        from provider_config import provider_manager, ensure_provider_setup
        
        # Check if any provider is configured
        if not ensure_provider_setup():
            console.print("‚ö†Ô∏è  No provider configured - test skipped")
            return True
        
        # Run a simple test
        test_prompts = ["Say hello in Python code"]
        
        console.print("Running test prompt...")
        results = run_tasks_parallel_sync(
            prompts=test_prompts,
            max_concurrent=1,
            timeout=30.0
        )
        
        if results and results[0].success:
            console.print("‚úÖ Installation test passed!")
            return True
        else:
            console.print("‚ö†Ô∏è  Installation test failed - but setup is complete")
            return True
            
    except Exception as e:
        console.print(f"‚ùå Installation test failed: {e}")
        return False

def print_next_steps():
    """Print next steps for the user."""
    console.print("\n" + "="*60)
    console.print("üéâ [bold green]Setup Complete![/bold green]")
    console.print("="*60)
    
    console.print("\nüìã [bold cyan]Next Steps:[/bold cyan]")
    console.print("1. Activate shell aliases:")
    console.print("   [code]source claude_aliases.sh[/code]")
    
    console.print("\n2. Test the CLI:")
    console.print("   [code]python cli.py config list[/code]")
    console.print("   [code]python cli.py example[/code]")
    
    console.print("\n3. Run your first parallel tasks:")
    console.print("   [code]python cli.py run --prompts \"Task 1\" \"Task 2\"[/code]")
    
    console.print("\n4. Try interactive mode:")
    console.print("   [code]python cli.py interactive[/code]")
    
    console.print("\n5. Check out examples:")
    console.print("   [code]python examples/basic_usage.py[/code]")
    
    console.print("\nüìö [bold cyan]Useful Commands:[/bold cyan]")
    console.print("‚Ä¢ [code]python cli.py config current[/code] - Show current provider")
    console.print("‚Ä¢ [code]python cli.py config set anthropic[/code] - Switch provider")
    console.print("‚Ä¢ [code]python cli.py setup interactive[/code] - Setup new provider")
    
    console.print("\nüîó [bold cyan]Quick Provider Switching:[/bold cyan]")
    console.print("‚Ä¢ [code]claude-anthropic \"your prompt\"[/code]")
    console.print("‚Ä¢ [code]claude-openrouter \"your prompt\"[/code]")


def main():
    """Main setup function."""
    console.print(Panel(
        "üöÄ Claude Parallel Runner Setup\n\n"
        "This script will set up everything you need to run multiple\n"
        "Claude Code SDK instances in parallel with provider switching.",
        style="cyan"
    ))
    
    if not Confirm.ask("Continue with setup?", default=True):
        console.print("Setup cancelled.")
        return
    
    # Check prerequisites
    console.print("\nüîç Checking prerequisites...")
    if not check_python_version():
        return
    
    if not check_node_js():
        return
    
    # Install dependencies
    console.print("\nüì¶ Installing dependencies...")
    if not install_python_dependencies():
        return
    
    if not install_claude_code():
        return
    
    # Setup environment
    console.print("\nüîß Setting up configuration...")
    setup_environment_file()
    create_shell_config()
    
    # Test installation
    console.print("\nüß™ Testing installation...")
    test_installation()
    
    # Show next steps
    print_next_steps()

if __name__ == "__main__":
    main() 